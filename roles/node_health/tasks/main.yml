---
- name: Gather facts
  setup:

- name: Collect disk usage
  command: "df -P -x squashfs -x tmpfs -x devtmpfs"
  register: disk_df
  changed_when: false

- name: Parse loadavg
  slurp:
    src: /proc/loadavg
  register: loadavg_raw
  changed_when: false

- name: Compute thresholds
  set_fact:
    cpu_cores: "{{ (ansible_facts.processor_vcpus | default(ansible_facts.processor_count | default(1))) | int }}"
    max_load: "{{ (health_max_load_per_core | float) * ((ansible_facts.processor_vcpus | default(ansible_facts.processor_count | default(1))) | int) }}"

- name: Build report
  vars:
    load_line: "{{ (loadavg_raw['content'] | b64decode).split()[0] | float }}"
  set_fact:
    health_report:
      host: "{{ inventory_hostname }}"
      os: "{{ ansible_facts.distribution }} {{ ansible_facts.distribution_version }}"
      uptime: "{{ ansible_facts.uptime_seconds | int }}"
      cpu_cores: "{{ cpu_cores }}"
      load1: "{{ load_line }}"
      load_ok: "{{ (load_line | float) <= (max_load | float) }}"
      mem_mb_total: "{{ ansible_facts.memtotal_mb }}"
      mem_mb_free: "{{ ansible_facts.memfree_mb }}"
      mem_free_pct: "{{ (ansible_facts.memfree_mb / (ansible_facts.memtotal_mb|float)) * 100.0 }}"
      disks_raw: "{{ disk_df.stdout_lines }}"
      time: "{{ ansible_date_time.iso8601 }}"

- name: Summarize and print
  debug:
    msg:
      - "Host: {{ health_report.host }} ({{ health_report.os }})"
      - "CPU cores: {{ health_report.cpu_cores }}, Load1: {{ health_report.load1 }} (<= {{ max_load | float | round(2) }} ok? {{ health_report.load_ok }})"
      - "Mem: {{ health_report.mem_mb_free }} / {{ health_report.mem_mb_total }} MB ({{ health_report.mem_free_pct | float | round(1) }}% free)"
      - "Disks (df -P):"
      - "{{ health_report.disks_raw }}"

- name: service facts
  service_facts:

- name: Report service states (ssh, cron)
  vars:
    critical_services:
      - ssh
      - cron
  debug:
    msg: >-
      {{
        critical_services | map('extract', ansible_facts.services) | list
      }}

- name: Post webhook with report
  uri:
    url: "{{ health_alert_webhook }}"
    method: POST
    status_code: 200,204
    body_format: json
    body: "{{ {'host': inventory_hostname, 'report': health_report} }}"
  when: health_alert_webhook | length > 0
  changed_when: false

# Final concise summary per host
- name: Build service state shortcuts
  set_fact:
    svc_ssh: "{{ (ansible_facts.services | default({}) | dict2items | selectattr('key','equalto','ssh') | map(attribute='value') | map(attribute='state') | list | first | default('unknown')) }}"
    svc_cron: "{{ (ansible_facts.services | default({}) | dict2items | selectattr('key','equalto','cron') | map(attribute='value') | map(attribute='state') | list | first | default('unknown')) }}"

- name: Build concise health summary line
  set_fact:
    health_summary_line: >-
      Summary: {{ health_report.host }} | OS {{ health_report.os }} | CPU {{ health_report.cpu_cores }}c |
      Load {{ health_report.load1 | float | round(2) }}/{{ max_load | float | round(2) }} {{ 'ok' if health_report.load_ok else 'high' }} |
      Mem {{ health_report.mem_mb_free }} / {{ health_report.mem_mb_total }} MB ({{ health_report.mem_free_pct | float | round(1) }}% free) |
      Services: ssh={{ svc_ssh }}, cron={{ svc_cron }}

- name: Final summary
  debug:
    msg: "{{ health_summary_line }}"
