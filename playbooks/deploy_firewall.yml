- name: Prepare ban infrastructure
  hosts: all
  become: true
  vars:
    ban_time: 3600
  tasks:
    - name: Check if ipset exists
      command: which ipset
      register: ipset_check
      changed_when: false
      failed_when: false

    - name: Install ipset on Debian/Ubuntu (only if missing)
      apt:
        name: ipset
        state: present
        update_cache: yes
      when:
        - ipset_check.rc != 0
        - ansible_facts.os_family == "Debian"
      ignore_errors: true   # чтобы не падать на битых репах

    - name: Install ipset on RHEL-like (only if missing)
      package:
        name: ipset
        state: present
      when:
        - ipset_check.rc != 0
        - ansible_facts.os_family in ["RedHat", "Rocky", "AlmaLinux", "Suse"]

    - name: Ensure banlist set exists
      command: ipset create banlist hash:ip timeout {{ ban_time }} -exist

    - name: Ensure drop rule via banlist exists (iptables/nft)
      shell: |
        if command -v iptables >/dev/null 2>&1; then
          iptables -C INPUT -m set --match-set banlist src -j DROP || \
          iptables -I INPUT -m set --match-set banlist src -j DROP
        elif command -v nft >/dev/null 2>&1; then
          nft list table inet filter >/dev/null 2>&1 || nft add table inet filter
          nft list set inet filter banlist >/dev/null 2>&1 || \
            nft 'add set inet filter banlist { type ipv4_addr; timeout {{ ban_time }}; flags timeout; }'
          nft list chain inet filter input >/dev/null 2>&1 || \
            nft 'add chain inet filter input { type filter hook input priority 0; }'
          nft 'add rule inet filter input ip saddr @banlist drop' 2>/dev/null || true
        fi
      args: { executable: /bin/bash }
